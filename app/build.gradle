apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

kotlin {
    experimental {
        coroutines 'enable'
    }
}

android {
//    compileSdkVersion 'android-P'
    compileSdkVersion 28
    defaultConfig {
        applicationId 'com.getaride.android'
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // uncomment this in order to make no mocked Android component
    // return default values during UnitTest
//    testOptions {
//        unitTests.returnDefaultValues = true
//    }

    signingConfigs {
        release {
//            storeFile project.rootProject.file('GetaRide.jks').getCanonicalFile()
//            storePassword System.getenv("KEYSTORE_PASSWORD")
//            keyAlias System.getenv("KEY_ALIAS")
//            keyPassword System.getenv("KEY_PASSWORD")
        }

        debug {
//            storeFile project.rootProject.file('debug.keystore').getCanonicalFile()
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-dev.pro'
            //ext.enableCrashlytics = true
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
            //testCoverageEnabled = true
            applicationIdSuffix '.dev'
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'tier'
    productFlavors {
        production {
            // Assigns this product flavor to the "tier" flavor dimension. Specifying
            // this property is optional if you are using only one dimension.
            dimension "tier"
            //ext.enableCrashlytics = true
            //multiDexEnabled true
        }
        dev {
            // Assigns this product flavor to the "tier" flavor dimension. Specifying
            // this property is optional if you are using only one dimension.
            dimension "tier"
//            applicationIdSuffix '.dev'
            //ext.enableCrashlytics = true
            //multiDexEnabled true
        }
    }
}

ext {
    //arch_version = '1.0.0-alpha9'
    support_library_version = '26.0.2'
    dagger_version = "2.8"
    espresso_version = '3.0.1'
    runner_version = '1.0.1'
    arch_version = "2.0.0-beta01"
//    arch_version = "1.0.0-alpha3"
    nav_version = "1.0.0-alpha04"
    koin_version = '0.9.3'
//    koin_androidx_version = '1.0.0-alpha-11'
    koin_androidx_version = '1.0.0-beta-3'
    //androidArchitectureVersion = "1.1.0"
    mockito_version = "2.18.3"
    coroutines_version = '0.22.5'
    retrofit_version = '2.3.0'
    okhttp_version = '3.9.1'
    architecture_core_testing_version = '1.1.0'
    //glide_version = '4.6.1'
    trakt_java_version = '5.8.1'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha1'

    // **************** Koin for Android Architecture Components **************** //
//    implementation "org.koin:koin-android-architecture:$koin_version"
    // Koin for Android
    implementation "org.koin:koin-android:$koin_androidx_version"
    // **************** Koin for AndroidX (based on koin-android) **************** //
    // Koin AndroidX for Lifecycle scoping
    implementation "org.koin:koin-androidx-scope:$koin_androidx_version"
    // or Koin for AndroidX Architecture ViewModel
    implementation "org.koin:koin-androidx-viewmodel:$koin_androidx_version"
    testImplementation "org.koin:koin-test:$koin_version"
    androidTestImplementation "org.koin:koin-test:$koin_version"

    // **************** RxBroadcast **************** //
    implementation 'com.cantrowitz:rxbroadcast:2.0.0'

    // **************** Kotlin coroutines **************** //
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // **************** Android KTX for framework API **************** //
    implementation 'androidx.core:core-ktx:1.0.0-beta01'

    // **************** trakt-java **************** //
    implementation ("com.uwetrottmann.trakt5:trakt-java:$trakt_java_version") {
        exclude group: 'org.threeten', module: 'threetenbp'
    }

    // **************** Retrofit **************** //
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // **************** okhttp **************** //
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    // **************** Lifecycle **************** //
    //implementation 'android.arch.lifecycle:extensions:1.1.1'
    // ViewModel and LiveData
//    implementation "android.arch.lifecycle:extensions:$androidArchitectureVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$arch_version"
    // alternatively - just ViewModel
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_version" // use -ktx for Kotlin
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$arch_version"
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    // **************** Room **************** //
    implementation "androidx.room:room-runtime:$arch_version"
    kapt "androidx.room:room-compiler:$arch_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$arch_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$arch_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$arch_version"

    // **************** Navigation **************** //
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version" // use -ktx for Kotlin
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version" // use -ktx for Kotlin
    // optional - Test helpers
    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:$nav_version" // use -ktx for Kotlin


    // **************** Jake Wharton **************** //
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    implementation 'com.jakewharton.timber:timber:4.5.1'

    // **************** Glide **************** //
    //implementation "com.github.bumptech.glide:glide:$glide_version"
    //kapt "com.github.bumptech.glide:compiler:$glide_version"
    //annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"  // Do NOT use this one in Koin

    //provided 'javax.annotation:jsr250-api:1.0'


    // test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    testImplementation "org.mockito:mockito-core:$mockito_version"

    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation('org.threeten:threetenbp:1.3.2') {
        exclude module: "com.jakewharton.threetenabp:threetenabp:1.0.5"
    }
}
